# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `todo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'Book' not in _M_Demo.__dict__:
    _M_Demo.Book = Ice.createTempClass()
    class Book(object):
        def __init__(self, title='', author='', year=0):
            self.title = title
            self.author = author
            self.year = year

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.author)
            _h = 5 * _h + Ice.getHash(self.year)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Demo.Book):
                return NotImplemented
            else:
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.author is None or other.author is None:
                    if self.author != other.author:
                        return (-1 if self.author is None else 1)
                else:
                    if self.author < other.author:
                        return -1
                    elif self.author > other.author:
                        return 1
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Book)

        __repr__ = __str__

    _M_Demo._t_Book = IcePy.defineStruct('::Demo::Book', Book, (), (
        ('title', (), IcePy._t_string),
        ('author', (), IcePy._t_string),
        ('year', (), IcePy._t_int)
    ))

    _M_Demo.Book = Book
    del Book

if '_t_BookSeq' not in _M_Demo.__dict__:
    _M_Demo._t_BookSeq = IcePy.defineSequence('::Demo::BookSeq', (), _M_Demo._t_Book)

_M_Demo._t_LibraryService = IcePy.defineValue('::Demo::LibraryService', Ice.Value, -1, (), False, True, None, ())

if 'LibraryServicePrx' not in _M_Demo.__dict__:
    _M_Demo.LibraryServicePrx = Ice.createTempClass()
    class LibraryServicePrx(Ice.ObjectPrx):

        def getBook(self, title, context=None):
            return _M_Demo.LibraryService._op_getBook.invoke(self, ((title, ), context))

        def getBookAsync(self, title, context=None):
            return _M_Demo.LibraryService._op_getBook.invokeAsync(self, ((title, ), context))

        def begin_getBook(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LibraryService._op_getBook.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_getBook(self, _r):
            return _M_Demo.LibraryService._op_getBook.end(self, _r)

        def listBooks(self, context=None):
            return _M_Demo.LibraryService._op_listBooks.invoke(self, ((), context))

        def listBooksAsync(self, context=None):
            return _M_Demo.LibraryService._op_listBooks.invokeAsync(self, ((), context))

        def begin_listBooks(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LibraryService._op_listBooks.begin(self, ((), _response, _ex, _sent, context))

        def end_listBooks(self, _r):
            return _M_Demo.LibraryService._op_listBooks.end(self, _r)

        def countBooksByAuthor(self, author, context=None):
            return _M_Demo.LibraryService._op_countBooksByAuthor.invoke(self, ((author, ), context))

        def countBooksByAuthorAsync(self, author, context=None):
            return _M_Demo.LibraryService._op_countBooksByAuthor.invokeAsync(self, ((author, ), context))

        def begin_countBooksByAuthor(self, author, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.LibraryService._op_countBooksByAuthor.begin(self, ((author, ), _response, _ex, _sent, context))

        def end_countBooksByAuthor(self, _r):
            return _M_Demo.LibraryService._op_countBooksByAuthor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.LibraryServicePrx.ice_checkedCast(proxy, '::Demo::LibraryService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.LibraryServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::LibraryService'
    _M_Demo._t_LibraryServicePrx = IcePy.defineProxy('::Demo::LibraryService', LibraryServicePrx)

    _M_Demo.LibraryServicePrx = LibraryServicePrx
    del LibraryServicePrx

    _M_Demo.LibraryService = Ice.createTempClass()
    class LibraryService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::LibraryService', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::LibraryService'

        @staticmethod
        def ice_staticId():
            return '::Demo::LibraryService'

        def getBook(self, title, current=None):
            raise NotImplementedError("servant method 'getBook' not implemented")

        def listBooks(self, current=None):
            raise NotImplementedError("servant method 'listBooks' not implemented")

        def countBooksByAuthor(self, author, current=None):
            raise NotImplementedError("servant method 'countBooksByAuthor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_LibraryServiceDisp)

        __repr__ = __str__

    _M_Demo._t_LibraryServiceDisp = IcePy.defineClass('::Demo::LibraryService', LibraryService, (), None, ())
    LibraryService._ice_type = _M_Demo._t_LibraryServiceDisp

    LibraryService._op_getBook = IcePy.Operation('getBook', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Demo._t_Book, False, 0), ())
    LibraryService._op_listBooks = IcePy.Operation('listBooks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_BookSeq, False, 0), ())
    LibraryService._op_countBooksByAuthor = IcePy.Operation('countBooksByAuthor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.LibraryService = LibraryService
    del LibraryService

# End of module Demo
