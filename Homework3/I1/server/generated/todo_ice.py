# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `todo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'Task' not in _M_Demo.__dict__:
    _M_Demo.Task = Ice.createTempClass()
    class Task(object):
        def __init__(self, id=0, description='', isDone=False):
            self.id = id
            self.description = description
            self.isDone = isDone

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.description)
            _h = 5 * _h + Ice.getHash(self.isDone)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Demo.Task):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.description is None or other.description is None:
                    if self.description != other.description:
                        return (-1 if self.description is None else 1)
                else:
                    if self.description < other.description:
                        return -1
                    elif self.description > other.description:
                        return 1
                if self.isDone is None or other.isDone is None:
                    if self.isDone != other.isDone:
                        return (-1 if self.isDone is None else 1)
                else:
                    if self.isDone < other.isDone:
                        return -1
                    elif self.isDone > other.isDone:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Task)

        __repr__ = __str__

    _M_Demo._t_Task = IcePy.defineStruct('::Demo::Task', Task, (), (
        ('id', (), IcePy._t_int),
        ('description', (), IcePy._t_string),
        ('isDone', (), IcePy._t_bool)
    ))

    _M_Demo.Task = Task
    del Task

if '_t_Tasks' not in _M_Demo.__dict__:
    _M_Demo._t_Tasks = IcePy.defineSequence('::Demo::Tasks', (), _M_Demo._t_Task)

_M_Demo._t_TodoService = IcePy.defineValue('::Demo::TodoService', Ice.Value, -1, (), False, True, None, ())

if 'TodoServicePrx' not in _M_Demo.__dict__:
    _M_Demo.TodoServicePrx = Ice.createTempClass()
    class TodoServicePrx(Ice.ObjectPrx):

        def getAllList(self, context=None):
            return _M_Demo.TodoService._op_getAllList.invoke(self, ((), context))

        def getAllListAsync(self, context=None):
            return _M_Demo.TodoService._op_getAllList.invokeAsync(self, ((), context))

        def begin_getAllList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.TodoService._op_getAllList.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllList(self, _r):
            return _M_Demo.TodoService._op_getAllList.end(self, _r)

        def getNotDoneTasks(self, context=None):
            return _M_Demo.TodoService._op_getNotDoneTasks.invoke(self, ((), context))

        def getNotDoneTasksAsync(self, context=None):
            return _M_Demo.TodoService._op_getNotDoneTasks.invokeAsync(self, ((), context))

        def begin_getNotDoneTasks(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.TodoService._op_getNotDoneTasks.begin(self, ((), _response, _ex, _sent, context))

        def end_getNotDoneTasks(self, _r):
            return _M_Demo.TodoService._op_getNotDoneTasks.end(self, _r)

        def addTask(self, description, context=None):
            return _M_Demo.TodoService._op_addTask.invoke(self, ((description, ), context))

        def addTaskAsync(self, description, context=None):
            return _M_Demo.TodoService._op_addTask.invokeAsync(self, ((description, ), context))

        def begin_addTask(self, description, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.TodoService._op_addTask.begin(self, ((description, ), _response, _ex, _sent, context))

        def end_addTask(self, _r):
            return _M_Demo.TodoService._op_addTask.end(self, _r)

        def changeTaskState(self, id, context=None):
            return _M_Demo.TodoService._op_changeTaskState.invoke(self, ((id, ), context))

        def changeTaskStateAsync(self, id, context=None):
            return _M_Demo.TodoService._op_changeTaskState.invokeAsync(self, ((id, ), context))

        def begin_changeTaskState(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.TodoService._op_changeTaskState.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_changeTaskState(self, _r):
            return _M_Demo.TodoService._op_changeTaskState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.TodoServicePrx.ice_checkedCast(proxy, '::Demo::TodoService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.TodoServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::TodoService'
    _M_Demo._t_TodoServicePrx = IcePy.defineProxy('::Demo::TodoService', TodoServicePrx)

    _M_Demo.TodoServicePrx = TodoServicePrx
    del TodoServicePrx

    _M_Demo.TodoService = Ice.createTempClass()
    class TodoService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::TodoService', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::TodoService'

        @staticmethod
        def ice_staticId():
            return '::Demo::TodoService'

        def getAllList(self, current=None):
            raise NotImplementedError("servant method 'getAllList' not implemented")

        def getNotDoneTasks(self, current=None):
            raise NotImplementedError("servant method 'getNotDoneTasks' not implemented")

        def addTask(self, description, current=None):
            raise NotImplementedError("servant method 'addTask' not implemented")

        def changeTaskState(self, id, current=None):
            raise NotImplementedError("servant method 'changeTaskState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_TodoServiceDisp)

        __repr__ = __str__

    _M_Demo._t_TodoServiceDisp = IcePy.defineClass('::Demo::TodoService', TodoService, (), None, ())
    TodoService._ice_type = _M_Demo._t_TodoServiceDisp

    TodoService._op_getAllList = IcePy.Operation('getAllList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_Tasks, False, 0), ())
    TodoService._op_getNotDoneTasks = IcePy.Operation('getNotDoneTasks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_Tasks, False, 0), ())
    TodoService._op_addTask = IcePy.Operation('addTask', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    TodoService._op_changeTaskState = IcePy.Operation('changeTaskState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_Demo.TodoService = TodoService
    del TodoService

# End of module Demo
